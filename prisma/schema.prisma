// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique @db.VarChar(255)
  name              String    @db.VarChar(255)
  token             String?   @db.VarChar(100)
  role              Int?      @db.Int
  email_verified_at DateTime?
  password          String    @db.VarChar(100)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime  @default(now()) @db.DateTime(0)
  updated_at        DateTime  @updatedAt @db.DateTime(0)
  contacts          Contact[]
  rating            Rating[]
  favorite          Favorite[]
  keranjang         Keranjang[]

  sentChats         Chat[]    @relation("sender")
  receivedChats     Chat[]    @relation("receiver")
  
  @@map("users")
}

model Contact {
  id         Int       @id @default(autoincrement())
  first_name String    @db.VarChar(100)
  last_name  String?   @db.VarChar(100)
  email      String?   @db.VarChar(200)
  phone      String?   @db.VarChar(20)
  user       User?     @relation(fields: [email], references: [email])
  addresses  Address[]

  @@map("contacts")
}

model Address {
  id          Int     @id @default(autoincrement())
  street      String? @db.VarChar(255)
  city        String? @db.VarChar(100)
  province    String? @db.VarChar(100)
  country     String  @db.VarChar(100)
  postal_code String  @db.VarChar(10)
  contact_id  Int
  contact     Contact @relation(fields: [contact_id], references: [id])

  @@map("addresses")
}

model Product {
  id          Int        @id @default(autoincrement())
  image       String     @db.VarChar(255)
  name        String     @db.VarChar(255)
  brand       String     @db.VarChar(255)
  description String     @db.Text
  stok        Int
  price       Int
  created_at  DateTime   @default(now()) @db.DateTime(0)
  updated_at  DateTime   @updatedAt @db.DateTime(0)
  Rating      Rating[]
  Category    Category[]
  favorite    Favorite[]
  keranjang   Keranjang[]

  @@map("products")
}

model Rating {
  id_rating   Int      @id @default(autoincrement())
  id_produk   Int
  id_user     Int
  rating      Int
  komentar    String
  created_at  DateTime @default(now()) @db.DateTime(0)
  modified_at DateTime @updatedAt @db.DateTime(0)
  produk      Product  @relation(fields: [id_produk], references: [id])
  user        User     @relation(fields: [id_user], references: [id])

  @@map("tabel_rating")
}

model Category {
  id_kategori   Int      @id @default(autoincrement())
  id_produk     Int
  nama_kategori String
  image         String
  slug          String
  status        Int
  created_at    DateTime @default(now()) @db.DateTime(0)
  updated_at    DateTime @updatedAt @db.DateTime(0)
  produk        Product  @relation(fields: [id_produk], references: [id])

  @@map("tabel_kategori")
}

model Chat {
  id_chat Int @id @default(autoincrement())
  id_sender Int
  id_receiver Int
  message String
  date  DateTime @default(now()) @db.DateTime(0)
  sender      User     @relation("sender", fields: [id_sender], references: [id])
  receiver    User     @relation("receiver", fields: [id_receiver], references: [id])

  @@map("tabel_chat")
}

model Favorite {
  id_favorite Int @id @default(autoincrement())
  id_user Int
  id_produk Int
  user      User     @relation(fields: [id_user], references: [id])
  produk    Product     @relation(fields: [id_produk], references: [id])

  @@map("tabel_favorite")
}

model Keranjang {
  id_keranjang     Int       @id @default(autoincrement())
  id_produk        Int
  id_user          Int
  jumlah_produk    Int
  sub_total        Int
  created_at       DateTime  @default(now()) @db.DateTime(0)
  updated_at       DateTime  @updatedAt @db.DateTime(0)
  produk           Product   @relation(fields: [id_produk], references: [id])
  user             User      @relation(fields: [id_user], references: [id])

  @@map("keranjang")
}